name: CMake

on:
  push:
    branches-ignore:
    - 'wip.*'
    - 'pr.*'
    tags:
    - 'v*'
  release:
    types: [published, created, released]
  pull_request:
    branches:
    - '*'

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#github-hosted-runners
        include:
          - os: ubuntu-22.04
            build_type: Release
            clang_checks: false
            cross: false
            alias: ci_gcc
          - os: ubuntu-22.04
            build_type: Release
            clang_checks: true
            cross: false
            alias: ci_clang
          - os: ubuntu-22.04
            build_type: Release
            clang_checks: false
            cross: true
            alias: ci_jetson_cross

    steps:
    - uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.OLYSEUS_BOT_SSH_PRIVATE_KEY }}
        submodules: true

    - name: Install system dependencies
      run: |
        sudo apt install -y libboost-all-dev
        sudo apt install -y libjpeg-dev
        sudo apt install -y libopencv-dev
        sudo apt install -y libeigen3-dev

    - name: Install Doxygen
      run: |
        sudo apt install -y doxygen
        sudo apt install -y graphviz
        sudo apt install -y libjs-mathjax

    - name: Install Ninja
      run: sudo apt install -y ninja-build

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/_builds /home/runner/opt ${{github.workspace}}/_deps

    # Clang 16.0.1 {
    - uses: robinraju/release-downloader@v1.2
      if: ${{matrix.clang_checks}}
      with:
        repository: "Olyseus/i_seed_drone_onboard"
        tag: "v0.0.1"
        fileName: "Clang-16.0.1-Ubuntu-22.04.tar.gz"
        out-file-path: "${{github.workspace}}/_deps"
        token: ${{secrets.GITHUB_TOKEN}}

    - name: Install Clang
      if: ${{matrix.clang_checks}}
      run: tar xf "${{github.workspace}}/_deps/Clang-16.0.1-Ubuntu-22.04.tar.gz" -C "${{github.workspace}}/_deps/"

    - name: Add Clang to PATH
      if: ${{matrix.clang_checks}}
      run: echo "${{github.workspace}}/_deps/LLVM-16.0.1-Linux/bin/" >> $GITHUB_PATH
    # }

    # jetson_cross {
    - uses: robinraju/release-downloader@v1.2
      if: ${{matrix.cross}}
      with:
        repository: "Olyseus/i_seed_drone_onboard"
        tag: "v0.0.3"
        fileName: "jetson_cross.tar.gz"
        out-file-path: "${{github.workspace}}/_deps"
        token: ${{secrets.GITHUB_TOKEN}}

    - name: Install jetson_cross
      if: ${{matrix.cross}}
      run: tar xf "${{github.workspace}}/_deps/jetson_cross.tar.gz" -C "${{github.workspace}}/_deps/"

    - name: Add jetson_cross to PATH
      if: ${{matrix.cross}}
      run: echo "${{github.workspace}}/_deps/jetson_cross/bin/" >> $GITHUB_PATH
    # }

    # googletest {
    - name: cache_googletest
      id: cache_googletest
      uses: actions/cache@v1
      with:
        path: '${{github.workspace}}/_deps/googletest'
        key: '${{runner.os}}_googletest_1_11_0_${{matrix.build_type}}_cache'

    - name: install_googletest
      if: ${{ steps.cache_googletest.outputs.cache-hit != 'true' }}
      run: cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} "-DCMAKE_INSTALL_PREFIX=${{github.workspace}}/_deps" -P third_party/dependencies/cmake/script/install_googletest.cmake
    # }

    # spdlog {
    - name: cache_spdlog
      id: cache_spdlog
      uses: actions/cache@v1
      with:
        path: '${{github.workspace}}/_deps/spdlog'
        key: '${{runner.os}}_spdlog_1_9_0_${{matrix.build_type}}_cache'

    - name: install_spdlog
      if: ${{ steps.cache_spdlog.outputs.cache-hit != 'true' }}
      run: cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} "-DCMAKE_INSTALL_PREFIX=${{github.workspace}}/_deps" -P third_party/dependencies/cmake/script/install_spdlog.cmake
    # }

    # cli11 {
    - name: cache_cli11
      id: cache_cli11
      uses: actions/cache@v1
      with:
        path: '${{github.workspace}}/_deps/cli11'
        key: '${{runner.os}}_cli11_1_9_1_${{matrix.build_type}}_cache'

    - name: install_cli11
      if: ${{ steps.cache_cli11.outputs.cache-hit != 'true' }}
      run: cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} "-DCMAKE_INSTALL_PREFIX=${{github.workspace}}/_deps" -P third_party/dependencies/cmake/script/install_cli11.cmake
    # }

    # nlohmann_json {
    - name: cache_nlohmann_json
      id: cache_nlohmann_json
      uses: actions/cache@v1
      with:
        path: '${{github.workspace}}/_deps/nlohmann_json'
        key: '${{runner.os}}_nlohmann_json_3_10_3_${{matrix.build_type}}_cache'

    - name: install_nlohmann_json
      if: ${{ steps.cache_nlohmann_json.outputs.cache-hit != 'true' }}
      run: cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} "-DCMAKE_INSTALL_PREFIX=${{github.workspace}}/_deps" -P third_party/dependencies/cmake/script/install_nlohmann_json.cmake
    # }

    # geographiclib {
    - name: cache_geographiclib
      id: cache_geographiclib
      uses: actions/cache@v1
      with:
        path: '${{github.workspace}}/_deps/geographiclib'
        key: '${{runner.os}}_geographiclib_2_1_1_${{matrix.build_type}}_cache'

    - name: install_geographiclib
      if: ${{ steps.cache_geographiclib.outputs.cache-hit != 'true' }}
      run: cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} "-DCMAKE_INSTALL_PREFIX=${{github.workspace}}/_deps" -P third_party/dependencies/cmake/script/install_geographiclib.cmake
    # }

    # protobuf {
    - name: cache_protobuf
      id: cache_protobuf
      uses: actions/cache@v1
      with:
        path: '${{github.workspace}}/_deps/protobuf'
        key: '${{runner.os}}_protobuf_3_0_0_${{matrix.build_type}}_cache'

    - name: install_protobuf
      if: ${{ steps.cache_protobuf.outputs.cache-hit != 'true' }}
      run: cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} "-DCMAKE_INSTALL_PREFIX=${{github.workspace}}/_deps" -P third_party/dependencies/cmake/script/install_protobuf.cmake
    # }

    - name: Check format
      working-directory: ${{github.workspace}}
      if: ${{matrix.clang_checks}}
      run: /bin/bash ./check_format.sh

    - name: Configure
      working-directory: ${{github.workspace}}/
      run: >
        cmake
        -B "${{github.workspace}}/_builds"
        -G Ninja
        -W no-dev
        -C "cmake/cache/${{matrix.alias}}.cmake"
        -D CMAKE_BUILD_TYPE=${{matrix.build_type}}

    - name: Build
      working-directory: ${{github.workspace}}/_builds
      run: cmake --build . --config ${{matrix.build_type}}

    - name: Test
      if: ${{ !matrix.cross }}
      working-directory: ${{github.workspace}}/_builds
      run: ctest -VV -C ${{matrix.build_type}}

    - name: Pack documentation
      if: startsWith(github.ref, 'refs/tags/v') && matrix.build_type == 'Release' && matrix.clang_checks == false && matrix.cross == false
      working-directory: ${{github.workspace}}/_builds
      run: cmake -E tar czvf "${{github.ref_name}}-doxygen.tar.gz" html/

    - name: Upload documentation
      if: startsWith(github.ref, 'refs/tags/v') && matrix.build_type == 'Release' && matrix.clang_checks == false && matrix.cross == false
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{secrets.GITHUB_TOKEN}}
        file: ${{github.workspace}}/_builds/*-doxygen.tar.gz
        asset_name: ${{matrix.asset_name}}
        tag: ${{github.ref}}
        overwrite: true
        file_glob: true
